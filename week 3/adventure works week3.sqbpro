<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="adventure works new.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="4124"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="AdventureWorks_Calendar" custom_title="0" dock_id="1" table="4,23:mainAdventureWorks_Calendar"/><dock_state state="000000ff00000000fd00000001000000020000000000000000fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000011e00ffffff000000000000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="SQL 1*">with CustomerSpending AS (
	SELECT
	 c.CustomerKey, 
	 sum(soh.OrderValue) as TotalSpent
	 from
	 Demographic.CustomerKey
	 Join 
	 AdventureWorks_Sales.OrderNumber soh ON c.CustomerKey= soh.CustomerKey
	 group by
	 c.CustomerKey
),
CustomerSegments AS (
	SELECT
	CustomerKey,
	TotalSpent,
	CASE
		WHEN TotalSpent &lt; 1000 THEN 'Low Spender'
		when TotalSpent BETWEEN 1000 AND 5000 THEN 'Medium Spender'
		when TotalSpent &gt;5000 THEN 'High Spender'
	END AS SpendingSegment
FROM 
 CustomerSpending
 )
 SELECT
 cs.CustomerKey
 cs.TotalSpent
 cs.SpendingSegment
FROM
	CustomerSegments cs
ORDER BY
	cs.TotalSpent DESC;</sql><sql name="SQL 2*">WITH CustomerSpending AS (
    SELECT
        CustomerKey, 
        SUM(OrderValue) AS TotalSpent
    FROM
        AdventureWorks_Demographics
    JOIN 
        AdventureWorks_Sales  ON CustomerKey = CustomerKey
    GROUP BY
        CustomerKey
),
CustomerSegments AS (
    SELECT
        CustomerKey,
        TotalSpent,
        CASE
            WHEN TotalSpent &lt; 1000 THEN 'Low Spender'
            WHEN TotalSpent BETWEEN 1000 AND 5000 THEN 'Medium Spender'
            WHEN TotalSpent &gt; 5000 THEN 'High Spender'
        END AS SpendingSegment
    FROM 
        CustomerSpending
)

SELECT
    cs.CustomerKey,
    cs.TotalSpent,
    cs.SpendingSegment
FROM
    CustomerSegments cs
ORDER BY
    cs.TotalSpent DESC;
</sql><sql name="SQL 3*">---1. sql query for the segregation of customers based on purchasing power
WITH CustomerSpending AS (
    SELECT
        c.CustomerKey, 
        SUM(OrderValue) AS TotalSpent
    FROM
        AdventureWorks_Demographics c
    JOIN 
        AdventureWorks_Sales so ON c.CustomerKey = so.CustomerKey
    GROUP BY
        c.CustomerKey
),
CustomerSegments AS (
    SELECT
        CustomerKey,
        TotalSpent,
        CASE
            WHEN TotalSpent &lt; 1000 THEN 'Low Spender'
            WHEN TotalSpent BETWEEN 1000 AND 5000 THEN 'Medium Spender'
            WHEN TotalSpent &gt; 5000 THEN 'High Spender'
        END AS SpendingSegment
    FROM 
        CustomerSpending
)

SELECT
    cs.CustomerKey,
    cs.TotalSpent,
    cs.SpendingSegment
FROM
    CustomerSegments cs
ORDER BY
    cs.TotalSpent DESC;
</sql><sql name="SQL 4*">Select ProductKey, Region, SUM (OrderQuantity) as total_sales
from AdventureWorks_Sales_2017
where OrderDate BETWEEN '01/01/2017' and '12/31/2017'
group by ProductKey,Region
order by total_sales DESC
LIMIT 1</sql><sql name="week 3 tasks on sql.sql" filename="C:/Users/Okorigwe Clinton/Desktop/3signet/week 3 tasks on sql.sql">-- Reference to file &quot;C:/Users/Okorigwe Clinton/Desktop/3signet/week 3 tasks on sql.sql&quot; (not supported by this version) --</sql><current_tab id="4"/></tab_sql></sqlb_project>
